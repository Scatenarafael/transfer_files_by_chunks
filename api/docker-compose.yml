version: '3.8'

networks:
  my_network:  # Definimos uma rede personalizada
    driver: bridge

services:

    db:
      image: postgres:15
      container_name: api_db
      restart: always
      networks:
        - my_network
      env_file:
        - .env
      mem_limit: 3Gb
      volumes:
        - postgres_data:/var/lib/postgresql/data/
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 10s
        timeout: 5s
        retries: 5

    redis:
      image: redis:7.0.11-alpine
      networks:
        - my_network  # Conectamos o Redis Ã  rede
      ports:
        - 6379:6379
      expose:
        - 6379
      container_name: redis

    api:

      container_name: api
      networks:
        - my_network
      
      build: .
      
      ports:
        - 8000:8000
      expose:
        - 8000
      depends_on:
        - redis
        - db
      env_file:
        - .env
      
      volumes:
        - .:/app
    
    celery:
      
      container_name: celery

      networks:
        - my_network

      build: .

      command: celery -A core worker --loglevel=info -f celery.log -Q emails,files
      
      depends_on:
        - api
        - redis
        - db
      env_file:
        - .env
      volumes:
        - .:/app
    
    celery_beat:
      
      container_name: celery_beat

      networks:
        - my_network

      build: .

      command: celery -A core beat
      
      depends_on:
        - api
        - db
        - redis
      env_file:
        - .env
      volumes:
        - .:/app
      
      
    flower:
      image: mher/flower
      networks:
        - my_network
      container_name: flower
      restart: always
      depends_on:
        - redis
      ports:
        - "5555:5555"  # Interface web do Flower
      expose:
        - 5555
      environment:
        - CELERY_BROKER_URL=redis://redis:6379/0
      command: ["celery", "flower", "--broker=redis://redis:6379/0"]


volumes:
  postgres_data:

